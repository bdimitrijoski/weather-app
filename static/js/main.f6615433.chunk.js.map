{"version":3,"sources":["domain/factories/model-factory.ts","domain/enums/temperature-unit.enum.ts","domain/models/model.ts","domain/models/temperature.model.ts","domain/data-mappers/temperature.data-mapper.ts","domain/data-mappers/time.data-mapper.ts","domain/models/weather-info.model.ts","domain/data-mappers/weather-info.data-mapper.ts","domain/data-mappers/date.data-mapper.ts","domain/models/weather-forecast.model.ts","domain/services/weather-forecast-resource.service.ts","domain/services/weather-forecast.service.ts","components/daily-weather-forecast.component.tsx","components/hourly-weather-forecast.component.tsx","components/days-toolbar.component.tsx","components/degree-toolbar.component.tsx","store/actions/weatherActions.ts","domain/types/index.ts","containers/weather-forecast-container.component.tsx","styles.tsx","App.tsx","store/reducers/weatherReducer.ts","store/index.ts","index.tsx"],"names":["ModelFactory","converter","JsonConvert","OperationMode","ENABLE","ValueCheckingMode","ALLOW_NULL","model","params","obj","this","deserializeObject","err","console","error","instance","TemperatureUnit","Model","JSON","parse","stringify","Temperature","JsonObject","JsonProperty","Number","value","Math","round","type","temperature","Metric","getCelsius","getFahrenheit","isNaN","toString","TemperatureDataMapper","JsonConverter","TimeDataMapper","hours","split","WeatherInfo","String","Object","assign","btoa","time","icon","replace","WeatherInfoDataMapper","weather","data","closestWeatherInfo","getClosestWetherInfo","isToday","date","calcAvgTemperatures","getInstance","create","mins","max","temp","weatherInfoDto","middle","ceil","length","forEach","item","index","push","min","avg","description","calcAvg","dateStr","Date","getDate","hoursSegments","slice","now","getHours","closestHour","getClosestHour","indexOf","reduce","a","b","goal","prev","curr","abs","DateDataMapper","isTomorrow","toLocaleDateString","weekday","day","reverse","join","WeatherForecast","WeatherForecastResourceService","Promise","resolve","reject","fetch","then","res","json","list","WeatherForecastService","resourceService","getWeather","processData","dailyForecastData","entry","dateInfo","dt_txt","forecast","weatherInfo","main","temp_min","temp_max","keys","map","key","useStyles","makeStyles","root","maxWidth","media","height","dailyWeatherForecast","units","isActive","onDayCardClick","classes","Card","className","onClick","title","CardActionArea","src","getImageUrl","alt","Typography","gutterBottom","variant","component","displayDate","CardContent","theme","createStyles","flexGrow","paper","padding","spacing","boxShadow","borderRadius","hourlyForecastComponent","Grid","container","hourlyForecast","i","xs","md","getHashCode","Paper","DaysToolbarComponent","pageIndex","onPageIndexChanged","pageIndexChanged","IconButton","aria-label","disabled","Icon","DegreeToolbarComponent","dispatch","useDispatch","useSelector","state","RadioGroup","name","row","onChange","event","payload","target","FormControlLabel","color","labelPlacement","control","Radio","label","textAlign","palette","text","secondary","WeatherForecastContainer","weatherData","currentForecast","loading","useEffect","service","resData","message","onDayCardClickHandler","Container","newPageIndex","setPageIndex","direction","justify","alignItems","sm","cardsStyles","backgroundColor","border","createMuiTheme","primary","lightBlue","overrides","MuiRadio","colorPrimary","colorSecondary","MuiPaper","MuiCard","MuiCssBaseline","html","WebkitFontSmoothing","body","require","config","App","ThemeProvider","CssBaseline","initialState","Imperial","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6615433.chunk.js","sourcesContent":["import { JsonConvert, OperationMode, ValueCheckingMode } from 'json2typescript';\r\nimport { Model } from '../models/model';\r\n\r\nexport class ModelFactory {\r\n    private static instance: ModelFactory;\r\n\r\n    private converter = new JsonConvert(OperationMode.ENABLE, ValueCheckingMode.ALLOW_NULL, true);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    private constructor() {}\r\n\r\n    static getInstance(): ModelFactory {\r\n        if (!ModelFactory.instance) {\r\n            ModelFactory.instance = new ModelFactory();\r\n        }\r\n\r\n        return ModelFactory.instance;\r\n    }\r\n\r\n    create<T extends Model>(model: { new (): T }, params: Object): T {\r\n        let obj: T = {} as T;\r\n\r\n        try {\r\n            obj = this.converter.deserializeObject(params, model);\r\n        } catch (err) {\r\n            // eslint-disable-next-line no-console\r\n            console.error(err);\r\n        }\r\n\r\n        return obj;\r\n    }\r\n}\r\n","export enum TemperatureUnit {\r\n    Imperial = 'imperial',\r\n    Metric = 'metric'\r\n}","export abstract class Model {\r\n    toJson(){\r\n        return JSON.parse(JSON.stringify(this));\r\n    }\r\n\r\n    abstract getHashCode(): string;\r\n}","import { JsonObject, JsonProperty } from 'json2typescript';\r\nimport { TemperatureUnit } from '../enums/temperature-unit.enum';\r\n\r\n@JsonObject('Temperature')\r\nexport class Temperature {\r\n    @JsonProperty('value', Number)\r\n    value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = Math.round(value);\r\n    }\r\n\r\n    getFahrenheit(): number {\r\n        return Math.round(this.value);\r\n    }\r\n\r\n    getCelsius() {\r\n        return Math.round(((this.value - 32) * 5) / 9);\r\n    }\r\n\r\n    toString(type?: TemperatureUnit): string {\r\n        const temperature = type && type === TemperatureUnit.Metric ? this.getCelsius() : this.getFahrenheit();\r\n        if (isNaN(temperature)) {\r\n            return '';\r\n        }\r\n        return temperature.toString();\r\n    }\r\n}\r\n","import { JsonConverter, JsonCustomConvert } from 'json2typescript';\r\nimport { Temperature } from '../models/temperature.model';\r\n\r\n@JsonConverter\r\nexport class TemperatureDataMapper implements JsonCustomConvert<Temperature> {\r\n    serialize(temperature: Temperature): number {\r\n        return temperature.value;\r\n    }\r\n\r\n    deserialize(value: number): Temperature {\r\n        return new Temperature(value);\r\n    }\r\n}\r\n","import { JsonConverter, JsonCustomConvert } from 'json2typescript';\r\n\r\n@JsonConverter\r\nexport class TimeDataMapper implements JsonCustomConvert<string> {\r\n    serialize(value: string): string {\r\n        return value;\r\n    }\r\n\r\n    deserialize(value: string): string {\r\n        const hours = +value.split(':')[0];\r\n        if (hours === 0) {\r\n            return '12 am';\r\n        }\r\n\r\n        const parsedHours = hours % 12 || 12;\r\n        return hours >= 12 ? `${parsedHours} pm` : `${hours} am`;\r\n    }\r\n}\r\n","import { JsonObject, JsonProperty } from 'json2typescript';\r\nimport { Model } from './model';\r\nimport { TemperatureDataMapper } from '../data-mappers/temperature.data-mapper';\r\nimport { Temperature } from './temperature.model';\r\nimport { TimeDataMapper } from '../data-mappers/time.data-mapper';\r\n\r\n@JsonObject('WeatherInfo')\r\nexport class WeatherInfo extends Model {\r\n    @JsonProperty('avg', TemperatureDataMapper)\r\n    avg: Temperature = undefined;\r\n\r\n    @JsonProperty('min', TemperatureDataMapper)\r\n    min: Temperature = undefined;\r\n\r\n    @JsonProperty('max', TemperatureDataMapper)\r\n    max: Temperature = undefined;\r\n\r\n    @JsonProperty('time', TimeDataMapper)\r\n    time: string = undefined;\r\n\r\n    @JsonProperty('description', String)\r\n    description: string = undefined;\r\n\r\n    @JsonProperty('icon', String)\r\n    icon: string = undefined;\r\n\r\n    @JsonProperty('date', String, true)\r\n    date: string = undefined;\r\n\r\n    constructor(params?: Partial<WeatherInfo>) {\r\n        super();\r\n        Object.assign(this, params);\r\n    }\r\n\r\n    getHashCode(): string {\r\n        return btoa(`${this.time}_${this.time}`);\r\n    }\r\n\r\n    getImageUrl(): string {\r\n        if (!this.icon) {\r\n            return '';\r\n        }\r\n        return `http://openweathermap.org/img/wn/${this.icon.replace('n', 'd')}.png`;\r\n    }\r\n}\r\n","import { JsonConverter, JsonCustomConvert } from 'json2typescript';\r\nimport { WeatherInfo } from '../models/weather-info.model';\r\nimport { ModelFactory } from '../factories/model-factory';\r\nimport { WeatherInfoDTO } from '../models/weather-info.dto';\r\n\r\n@JsonConverter\r\nexport class WeatherInfoDataMapper implements JsonCustomConvert<WeatherInfo> {\r\n    serialize(weather: WeatherInfo): WeatherInfoDTO {\r\n        return JSON.parse(JSON.stringify(weather));\r\n    }\r\n\r\n    deserialize(data: WeatherInfoDTO[]): WeatherInfo {\r\n        const closestWeatherInfo = this.getClosestWetherInfo(data);\r\n        const isToday = this.isToday(closestWeatherInfo.date);\r\n\r\n        const params = isToday ? closestWeatherInfo : this.calcAvgTemperatures(data);\r\n\r\n        return ModelFactory.getInstance().create<WeatherInfo>(WeatherInfo, params);\r\n    }\r\n\r\n    private calcAvgTemperatures(data: WeatherInfoDTO[]): WeatherInfoDTO {\r\n        const mins: number[] = [];\r\n        const max: number[] = [];\r\n        const temp: number[] = [];\r\n        const weatherInfoDto: WeatherInfoDTO = {} as any;\r\n        const middle = Math.ceil(data.length / 2);\r\n        data.forEach((item: WeatherInfoDTO, index: number) => {\r\n            mins.push(item.min);\r\n            max.push(item.max);\r\n            temp.push(item.avg);\r\n\r\n            if (index === middle) {\r\n                weatherInfoDto.icon = item.icon;\r\n                weatherInfoDto.time = item.time;\r\n                weatherInfoDto.description = item.description;\r\n            }\r\n        });\r\n        weatherInfoDto.min = this.calcAvg(mins);\r\n        weatherInfoDto.max = this.calcAvg(max);\r\n        weatherInfoDto.avg = this.calcAvg(temp);\r\n\r\n        return weatherInfoDto;\r\n    }\r\n\r\n    private isToday(dateStr: string): boolean {\r\n        const date = new Date(dateStr);\r\n        const today = new Date();\r\n        return today.getDate() === date.getDate();\r\n    }\r\n\r\n    private getClosestWetherInfo(data: WeatherInfoDTO[]): WeatherInfoDTO {\r\n        let hoursSegments = [0, 3, 6, 9, 12, 15, 18, 21];\r\n        if (hoursSegments.length !== data.length) {\r\n            hoursSegments = hoursSegments.slice(hoursSegments.length - data.length);\r\n        }\r\n        const now = new Date().getHours();\r\n        const closestHour = this.getClosestHour(hoursSegments, now);\r\n        return data[hoursSegments.indexOf(closestHour)];\r\n    }\r\n\r\n    private calcAvg(data: number[]) {\r\n        const sum = data.reduce((a, b) => a + b, 0);\r\n        const avg = sum / data.length || 0;\r\n        return avg;\r\n    }\r\n\r\n    private getClosestHour(hours: number[], goal: number): number {\r\n        return hours.reduce((prev, curr) => {\r\n            return Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev;\r\n        });\r\n    }\r\n}\r\n","import { JsonConverter, JsonCustomConvert } from 'json2typescript';\r\n\r\n@JsonConverter\r\nexport class DateDataMapper implements JsonCustomConvert<string> {\r\n    serialize(value: string): string {\r\n        return value;\r\n    }\r\n\r\n    deserialize(value: string): string {\r\n        const options = { weekday: 'short', day: 'numeric' };\r\n        const date = new Date(value);\r\n\r\n        if (this.isToday(date)) {\r\n            return 'Today';\r\n        }\r\n        if (this.isTomorrow(date)) {\r\n            return 'Tomorrow';\r\n        }\r\n        return date\r\n            .toLocaleDateString('en-US', options)\r\n            .split(' ')\r\n            .reverse()\r\n            .join(' ');\r\n    }\r\n\r\n    private isToday(date: Date): boolean {\r\n        const today = new Date();\r\n        return today.getDate() === date.getDate();\r\n    }\r\n\r\n    private isTomorrow(date: Date): boolean {\r\n        const today = new Date();\r\n        return today.getDate() + 1 === date.getDate();\r\n    }\r\n}\r\n","import { JsonObject, JsonProperty } from 'json2typescript';\r\nimport { Model } from './model';\r\nimport { WeatherInfo } from './weather-info.model';\r\nimport { WeatherInfoDataMapper } from '../data-mappers/weather-info.data-mapper';\r\nimport { DateDataMapper } from '../data-mappers/date.data-mapper';\r\nimport { WeatherInfoDTO } from './weather-info.dto';\r\n\r\nexport interface WeatherForecastParams {\r\n    date: string;\r\n    forecast: WeatherInfoDTO[];\r\n}\r\n\r\n@JsonObject('WeatherForecast')\r\nexport class WeatherForecast extends Model {\r\n    @JsonProperty('date', String)\r\n    date: string = undefined;\r\n\r\n    @JsonProperty('date', DateDataMapper)\r\n    displayDate: string = undefined;\r\n\r\n    @JsonProperty('forecast', [WeatherInfo])\r\n    hourlyForecast: WeatherInfo[] = undefined;\r\n\r\n    @JsonProperty('forecast', WeatherInfoDataMapper)\r\n    weather: WeatherInfo = undefined;\r\n\r\n    constructor(params: WeatherForecastParams) {\r\n        super();\r\n        Object.assign(this, params);\r\n    }\r\n\r\n    getImageUrl(): string {\r\n        if (!this.weather) {\r\n            return '';\r\n        }\r\n        return `http://openweathermap.org/img/wn/${this.weather.icon.replace('n', 'd')}@2x.png`;\r\n    }\r\n\r\n    getHashCode(): string {\r\n        return btoa(`${this.date}`);\r\n    }\r\n}\r\n","import { WeatherData } from '../types';\r\n\r\nexport class WeatherForecastResourceService {\r\n    getWeather(): Promise<WeatherData[]> {\r\n        return new Promise((resolve, reject) => {\r\n            const weatherAPIKey = '75f972b80e26f14fe6c920aa6a85ad57';\r\n            fetch(`http://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=${weatherAPIKey}&cnt=40&units=imperial`)\r\n                .then(res => res.json())\r\n                .then(data => resolve(data.list));\r\n        });\r\n    }\r\n}\r\n","import { ModelFactory } from '../factories/model-factory';\r\nimport { WeatherForecast, WeatherForecastParams } from '../models/weather-forecast.model';\r\nimport { WeatherData } from '../types';\r\nimport { WeatherForecastResourceService } from './weather-forecast-resource.service';\r\nimport { WeatherInfoDTO } from '../models/weather-info.dto';\r\n\r\nexport class WeatherForecastService {\r\n    private resourceService: WeatherForecastResourceService;\r\n\r\n    constructor() {\r\n        this.resourceService = new WeatherForecastResourceService();\r\n    }\r\n\r\n    getWeather(): Promise<WeatherForecast[]> {\r\n        return this.resourceService.getWeather().then(data => {\r\n            return this.processData(data);\r\n        });\r\n    }\r\n\r\n    private processData(data: WeatherData[]): WeatherForecast[] {\r\n        const dailyForecastData = {} as any;\r\n\r\n        let dateStr = '';\r\n\r\n        data.forEach(entry => {\r\n            const dateInfo = entry.dt_txt.split(' ');\r\n            const date = dateInfo[0];\r\n            const time = dateInfo[1];\r\n            if (dateStr !== date) {\r\n                dateStr = date;\r\n                dailyForecastData[dateStr] = {\r\n                    date: dateStr,\r\n                    forecast: [],\r\n                } as WeatherForecastParams;\r\n            }\r\n\r\n            const weatherInfo = {\r\n                min: +entry.main.temp_min,\r\n                max: +entry.main.temp_max,\r\n                avg: +entry.main.temp,\r\n                description: entry.weather[0].description,\r\n                icon: entry.weather[0].icon,\r\n                time,\r\n                date,\r\n            } as WeatherInfoDTO;\r\n\r\n            dailyForecastData[dateStr].forecast.push(weatherInfo);\r\n        });\r\n\r\n        return Object.keys(dailyForecastData).map(key =>\r\n            ModelFactory.getInstance().create<WeatherForecast>(WeatherForecast as any, dailyForecastData[key]),\r\n        );\r\n    }\r\n}\r\n","import Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport React, { FC } from 'react';\r\nimport { TemperatureUnit } from '../domain/enums/temperature-unit.enum';\r\nimport { WeatherForecast } from '../domain/models/weather-forecast.model';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nexport interface DailyWeatherForecastProps {\r\n    data: WeatherForecast;\r\n    units: TemperatureUnit;\r\n    isActive: boolean;\r\n    onDayCardClick: Function;\r\n}\r\n\r\nconst dailyWeatherForecast: FC<DailyWeatherForecastProps> = ({ data, units, isActive, onDayCardClick }) => {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const classes = useStyles();\r\n\r\n    const getIsActive = () => {\r\n        return isActive ? ' active' : '';\r\n    };\r\n\r\n    return (\r\n        <Card className={`${classes.root} weather-card ${getIsActive()}`} onClick={() => onDayCardClick(data)} title=\"Click to see Details\">\r\n            <CardActionArea>\r\n                <img src={`${data.getImageUrl()}`} alt={data.weather.description} />\r\n                <Typography gutterBottom variant=\"body1\" component=\"p\">\r\n                    {data.displayDate}\r\n                </Typography>\r\n\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {data.weather.avg.toString(units)} <sup>°C</sup>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\" className=\"text-capitalize\">\r\n                        {data.weather.description}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default dailyWeatherForecast;\r\n","import React, { FC } from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { WeatherForecast } from '../domain/models/weather-forecast.model';\r\nimport { TemperatureUnit } from '../domain/enums/temperature-unit.enum';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            boxShadow: 'none',\r\n            borderRadius: 0,\r\n        },\r\n    }),\r\n);\r\n\r\nexport interface HourlyWeatherForecastProps {\r\n    data: WeatherForecast;\r\n    units: TemperatureUnit;\r\n}\r\n\r\nconst hourlyForecastComponent: FC<HourlyWeatherForecastProps> = ({ data, units }) => {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                {data.hourlyForecast &&\r\n                    data.hourlyForecast.map((item, i) => (\r\n                        <Grid item xs={12} md key={item.getHashCode()} title={item.description}>\r\n                            <Paper className={`${classes.paper} weather-card hourly-forecast-card`}>\r\n                                <div className=\"txt-wrapper img-wrapper\">\r\n                                    <img src={`${item.getImageUrl()}`} alt={item.description} />\r\n                                </div>\r\n\r\n                                <div className=\"weather-info-wrapper\">\r\n                                    <div className=\"txt-wrapper\">\r\n                                        <p className=\"txt-wrapper\">\r\n                                            {item.avg.toString(units)} <sup>°C</sup>\r\n                                        </p>\r\n\r\n                                        <p className=\"txt-wrapper\">{item.time}</p>\r\n                                    </div>\r\n                                    <p className=\"visible-mobile pull-left\">{item.description}</p>\r\n                                </div>\r\n                            </Paper>\r\n                        </Grid>\r\n                    ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default hourlyForecastComponent;\r\n","import { IconButton } from '@material-ui/core';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport React, { FC } from 'react';\r\n\r\nexport interface DaysToolbarComponentProps {\r\n    pageIndex: number;\r\n    onPageIndexChanged: Function;\r\n}\r\n\r\nconst DaysToolbarComponent: FC<DaysToolbarComponentProps> = ({ pageIndex, onPageIndexChanged }) => {\r\n    const isPrevBtnDisabled = () => {\r\n        return pageIndex === 0;\r\n    };\r\n\r\n    const isNextBtnDisabled = () => {\r\n        return pageIndex >= 2;\r\n    };\r\n\r\n    const pageIndexChanged = (type: string) => {\r\n        const newPageIndex = type === 'next' ? pageIndex + 1 : pageIndex - 1;\r\n        onPageIndexChanged(newPageIndex);\r\n    };\r\n\r\n    return (\r\n        <div className=\"days-toolbar\">\r\n            <IconButton aria-label=\"Prev\" className=\"pull-left\" onClick={() => pageIndexChanged('prev')} disabled={isPrevBtnDisabled()}>\r\n                <Icon>chevron_left</Icon>\r\n            </IconButton>\r\n            <IconButton aria-label=\"Next\" className=\"pull-right\" onClick={() => pageIndexChanged('next')} disabled={isNextBtnDisabled()}>\r\n                <Icon>chevron_right</Icon>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DaysToolbarComponent;\r\n","import { FormControlLabel, Radio, RadioGroup } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TemperatureUnit } from '../domain/enums/temperature-unit.enum';\r\nimport { RootState } from '../store';\r\nimport { switchUnits } from '../store/actions/weatherActions';\r\n\r\nconst DegreeToolbarComponent = () => {\r\n    const dispatch = useDispatch();\r\n    const units = useSelector((state: RootState) => state.weather.units);\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(switchUnits(event.target.value as TemperatureUnit));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"pull-right\">\r\n                <RadioGroup name=\"units\" className=\"pull-right\" value={units} row onChange={handleChange}>\r\n                    <FormControlLabel value=\"imperial\" color=\"primary\" labelPlacement=\"end\" control={<Radio />} label=\"Fahrenheit\" />\r\n                    <FormControlLabel value=\"metric\" color=\"primary\" labelPlacement=\"end\" control={<Radio />} label=\"Celcius\" />\r\n                </RadioGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DegreeToolbarComponent;\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from '..';\r\nimport { WeatherForecastService } from '../../domain/services/weather-forecast.service';\r\nimport { GET_WEATHER, SET_ERROR, SET_LOADING, WeatherAction, SET_FORECAST_ACTIVE, SET_PAGE_INDEX, SWITCH_UNITS } from '../../domain/types';\r\nimport { WeatherForecast } from '../../domain/models/weather-forecast.model';\r\nimport { TemperatureUnit } from '../../domain/enums/temperature-unit.enum';\r\n\r\nexport const getWeather = (): ThunkAction<void, RootState, null, WeatherAction> => {\r\n    return async dispatch => {\r\n        try {\r\n            const service = new WeatherForecastService();\r\n            const resData = await service.getWeather();\r\n            dispatch({\r\n                type: GET_WEATHER,\r\n                payload: resData,\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: SET_ERROR,\r\n                payload: err.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const setForecastActive = (weatherForecast: WeatherForecast): WeatherAction => {\r\n    return {\r\n        type: SET_FORECAST_ACTIVE,\r\n        payload: weatherForecast,\r\n    };\r\n};\r\n\r\nexport const setLoading = (): WeatherAction => {\r\n    return {\r\n        type: SET_LOADING,\r\n    };\r\n};\r\n\r\nexport const setPageIndex = (pageIndex: number): WeatherAction => {\r\n    return {\r\n        type: SET_PAGE_INDEX,\r\n        payload: pageIndex,\r\n    };\r\n};\r\n\r\nexport const switchUnits = (type: TemperatureUnit): WeatherAction => {\r\n    return {\r\n        type: SWITCH_UNITS,\r\n        payload: type,\r\n    };\r\n};\r\n\r\nexport const setError = (): WeatherAction => {\r\n    return {\r\n        type: SET_ERROR,\r\n        payload: '',\r\n    };\r\n};\r\n","import { WeatherForecast } from '../models/weather-forecast.model';\r\nimport { TemperatureUnit } from '../enums/temperature-unit.enum';\r\n\r\nexport const GET_WEATHER = 'GET_WEATHER';\r\nexport const SET_FORECAST_ACTIVE = 'SET_FORECAST_ACTIVE';\r\nexport const SET_LOADING = 'SET_LOADING';\r\nexport const SET_ERROR = 'SET_ERROR';\r\nexport const SET_ALERT = 'SET_ALERT';\r\nexport const SET_PAGE_INDEX = 'SET_PAGE_INDEX';\r\nexport const SWITCH_UNITS = 'SWITCH_UNITS';\r\n\r\nexport interface Weather {\r\n    description: string;\r\n    icon: string;\r\n    id: number;\r\n    main: string;\r\n}\r\n\r\nexport interface WeatherData {\r\n    clouds: {\r\n        all: number;\r\n    };\r\n    dt: number;\r\n    dt_txt: string;\r\n    main: {\r\n        feels_like: number;\r\n        humidity: number;\r\n        pressure: number;\r\n        temp: number;\r\n        temp_max: number;\r\n        temp_min: number;\r\n    };\r\n    sys: {\r\n        pod: string;\r\n    };\r\n    visibility: number;\r\n    pop: number;\r\n    weather: Weather[];\r\n    wind: {\r\n        speed: number;\r\n        deg: number;\r\n    };\r\n}\r\n\r\nexport interface WeatherError {\r\n    cod: string;\r\n    message: string;\r\n}\r\n\r\nexport interface WeatherState {\r\n    data: WeatherForecast[] | null;\r\n    currentForecast: WeatherForecast | null;\r\n    loading: boolean;\r\n    error: string;\r\n    pageIndex: number;\r\n    units: TemperatureUnit;\r\n}\r\n\r\ninterface GetWeatherAction {\r\n    type: typeof GET_WEATHER;\r\n    payload: WeatherForecast[];\r\n}\r\ninterface SetForecastActiveAction {\r\n    type: typeof SET_FORECAST_ACTIVE;\r\n    payload: WeatherForecast;\r\n}\r\n\r\ninterface SetLoadingAction {\r\n    type: typeof SET_LOADING;\r\n}\r\n\r\ninterface SetErrorAction {\r\n    type: typeof SET_ERROR;\r\n    payload: string;\r\n}\r\n\r\ninterface SwitchUnitsAction {\r\n    type: typeof SWITCH_UNITS;\r\n    payload: TemperatureUnit;\r\n}\r\n\r\ninterface SetPageIndexAction {\r\n    type: typeof SET_PAGE_INDEX;\r\n    payload: number;\r\n}\r\n\r\nexport type WeatherAction =\r\n    | GetWeatherAction\r\n    | SetForecastActiveAction\r\n    | SetLoadingAction\r\n    | SetErrorAction\r\n    | SetPageIndexAction\r\n    | SwitchUnitsAction;\r\n\r\nexport interface AlertAction {\r\n    type: typeof SET_ALERT;\r\n    payload: string;\r\n}\r\n\r\nexport interface AlertState {\r\n    message: string;\r\n}\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { RootState } from '../store';\r\nimport { getWeather, setLoading, setForecastActive, setPageIndex } from '../store/actions/weatherActions';\r\nimport DailyWeatherForecast from '../components/daily-weather-forecast.component';\r\nimport HourlyForecastComponent from '../components/hourly-weather-forecast.component';\r\nimport DaysToolbarComponent from '../components/days-toolbar.component';\r\nimport DegreeToolbarComponent from '../components/degree-toolbar.component';\r\nimport { WeatherForecast } from '../domain/models/weather-forecast.model';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }),\r\n);\r\n\r\nconst WeatherForecastContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const pageIndex = useSelector((state: RootState) => state.weather.pageIndex);\r\n    const weatherData = useSelector((state: RootState) => (state.weather.data ? state.weather.data.slice(pageIndex, pageIndex + 3) : []));\r\n    const currentForecast = useSelector((state: RootState) => state.weather.currentForecast);\r\n    const units = useSelector((state: RootState) => state.weather.units);\r\n    const loading = useSelector((state: RootState) => state.weather.loading);\r\n\r\n    useEffect(() => {\r\n        dispatch(setLoading());\r\n        dispatch(getWeather());\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const onDayCardClickHandler = (data: WeatherForecast) => {\r\n        dispatch(setForecastActive(data));\r\n    };\r\n\r\n    const onPageIndexChangedHandler = (newPageIndex: number) => {\r\n        dispatch(setPageIndex(newPageIndex));\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <h1>Weather in Munich</h1>\r\n            {loading ? (\r\n                <h2 className=\"is-size-3 py-2\">Loading...</h2>\r\n            ) : (\r\n                <div>\r\n                    <DegreeToolbarComponent />\r\n\r\n                    <div className=\"clearfix\" />\r\n                    <div className=\"heading\">\r\n                        <h2>Daily</h2>\r\n                        <div className=\"pull-right\">\r\n                            <DaysToolbarComponent pageIndex={pageIndex} onPageIndexChanged={onPageIndexChangedHandler} />\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.root}>\r\n                        <Grid container spacing={3} direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                            {!loading &&\r\n                                weatherData &&\r\n                                weatherData.map((data, i) => (\r\n                                    <Grid item xs={4} sm={4} key={data.getHashCode()}>\r\n                                        <DailyWeatherForecast\r\n                                            data={data}\r\n                                            units={units}\r\n                                            isActive={data.getHashCode() === currentForecast.getHashCode()}\r\n                                            onDayCardClick={onDayCardClickHandler}\r\n                                        />\r\n                                    </Grid>\r\n                                ))}\r\n                        </Grid>\r\n                    </div>\r\n                    <div className=\"clearfix\" />\r\n                    <br />\r\n\r\n                    <div className=\"heading\">\r\n                        <h2>Hourly</h2>\r\n                    </div>\r\n                    <div>{currentForecast ? <HourlyForecastComponent data={currentForecast} units={units} /> : ''}</div>\r\n                </div>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\nexport default WeatherForecastContainer;\r\n","import { createMuiTheme } from '@material-ui/core';\r\nimport { lightBlue } from '@material-ui/core/colors';\r\n\r\nconst cardsStyles = {\r\n    color: 'white',\r\n    backgroundColor: 'transparent',\r\n    boxShadow: 'none',\r\n    borderRadius: 0,\r\n    border: '1px solid transparent',\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: lightBlue,\r\n        secondary: {\r\n            main: '#fff',\r\n        },\r\n    },\r\n    overrides: {\r\n        MuiRadio: {\r\n            colorPrimary: {\r\n                color: 'white',\r\n            },\r\n            colorSecondary: {\r\n                color: 'white',\r\n            },\r\n        },\r\n        MuiPaper: {\r\n            root: cardsStyles,\r\n        },\r\n        MuiCard: {\r\n            root: cardsStyles,\r\n        },\r\n        MuiCssBaseline: {\r\n            '@global': {\r\n                html: {\r\n                    WebkitFontSmoothing: 'auto',\r\n                },\r\n                body: {\r\n                    color: 'white',\r\n                },\r\n            },\r\n        },\r\n    },\r\n});\r\n","import React, { FC } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport './App.css';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport WeatherForecastContainer from './containers/weather-forecast-container.component';\r\nimport { theme } from './styles';\r\n\r\nrequire('dotenv').config();\r\n\r\nconst App: FC = () => {\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div className=\"App\">\r\n                <div className=\"weather-bg\" />\r\n                <div className=\"content-wrapper\">\r\n                    <CssBaseline />\r\n                    <WeatherForecastContainer />\r\n                </div>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n    WeatherState,\r\n    WeatherAction,\r\n    GET_WEATHER,\r\n    SET_LOADING,\r\n    SET_ERROR,\r\n    SET_FORECAST_ACTIVE,\r\n    SET_PAGE_INDEX,\r\n    SWITCH_UNITS,\r\n} from '../../domain/types';\r\nimport { TemperatureUnit } from '../../domain/enums/temperature-unit.enum';\r\n\r\nconst initialState: WeatherState = {\r\n    data: null,\r\n    currentForecast: null,\r\n    loading: false,\r\n    error: '',\r\n    pageIndex: 0,\r\n    units: TemperatureUnit.Imperial,\r\n};\r\n\r\nexport default (state = initialState, action: WeatherAction): WeatherState => {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            return {\r\n                data: action.payload,\r\n                currentForecast: action.payload.length ? action.payload[0] : null,\r\n                loading: false,\r\n                error: '',\r\n                pageIndex: 0,\r\n                units: TemperatureUnit.Imperial,\r\n            };\r\n        case SET_FORECAST_ACTIVE:\r\n            return {\r\n                ...state,\r\n                currentForecast: action.payload,\r\n            };\r\n        case SET_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                loading: false,\r\n            };\r\n        case SET_PAGE_INDEX:\r\n            return {\r\n                ...state,\r\n                pageIndex: action.payload,\r\n            };\r\n        case SWITCH_UNITS:\r\n            return {\r\n                ...state,\r\n                units: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport weatherReducer from './reducers/weatherReducer';\r\n// import alertReducer from './reducers/alertReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  weather: weatherReducer,\r\n//   alert: alertReducer\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}